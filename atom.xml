<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhm&#39;s blog</title>
  
  <subtitle>have a nice time</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-25T07:17:34.306Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zhm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>密码学基础</title>
    <link href="http://example.com/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/</id>
    <published>2020-12-25T06:11:45.000Z</published>
    <updated>2020-12-25T07:17:34.306Z</updated>
    
    <content type="html"><![CDATA[<p>MD5: 求校验和，不是加密算法，内容相同的文件校验和相同</p><p>空文件的MD5：</p><p><img src="/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20201225142510061.png" alt="image-20201225142510061"></p><p>SHA:</p><p>空文件的SHA</p><p><img src="/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20201225142759566.png" alt="image-20201225142759566"></p><p>利用管道可以直接看到字符串的md5值：</p><p><img src="/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20201225145103557.png" alt="image-20201225145103557"></p><p> 校验和可以用来检验文件是否为官方发布：</p><p><img src="/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20201225144629728.png" alt="image-20201225144629728"></p><p>区块链</p><p><img src="/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20201225151731922.png" alt="image-20201225151731922"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MD5: 求校验和，不是加密算法，内容相同的文件校验和相同&lt;/p&gt;
&lt;p&gt;空文件的MD5：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/25/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/image-2020122514</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nodejs实现http服务器</title>
    <link href="http://example.com/2020/12/21/nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2020/12/21/nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-12-21T06:27:56.000Z</published>
    <updated>2020-12-23T09:29:42.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http服务器基础代码"><a href="#http服务器基础代码" class="headerlink" title="http服务器基础代码"></a>http服务器基础代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;)</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line"></span><br><span class="line">    res.end();</span><br><span class="line">&#125;).listen(8000, &#39;127.0.0.1&#39;)</span><br></pre></td></tr></table></figure><p>注意其中<code>res.end()</code>一定不能缺少，否则服务器会以为请求没有结束，一直处于等待状态。</p><p>启动服务器</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221143143513.png" alt="image-20201221143143513"></p><h1 id="解析表单Get请求"><a href="#解析表单Get请求" class="headerlink" title="解析表单Get请求"></a>解析表单Get请求</h1><h2 id="引入url模块"><a href="#引入url模块" class="headerlink" title="引入url模块"></a>引入<code>url</code>模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;)</span><br><span class="line">var url &#x3D; require(&#39;url&#39;)</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">​    var uu &#x3D; url.parse(req.url)</span><br><span class="line">​    console.log(uu)</span><br><span class="line">​    res.end();</span><br><span class="line">&#125;).listen(8000, &#39;127.0.0.1&#39;)</span><br></pre></td></tr></table></figure><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221143022673.png" alt="image-20201221143022673"></p><p>发起请求</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221143036718.png" alt="image-20201221143036718"></p><p>打印结果：</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221143123869.png" alt="image-20201221143123869"></p><p>所以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url.parse(req.url).query</span><br></pre></td></tr></table></figure><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221145247954.png" alt="image-20201221145247954"></p><p>可以解析到</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221145332385.png" alt="image-20201221145332385"></p><h2 id="引入querystring模块"><a href="#引入querystring模块" class="headerlink" title="引入querystring模块"></a>引入<code>querystring</code>模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var querystring &#x3D; require(&#39;querystring&#39;)</span><br><span class="line">......</span><br><span class="line">var uu &#x3D; querystring.parse(xxxxx)</span><br></pre></td></tr></table></figure><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221145829033.png" alt="image-20201221145829033"></p><p>解析结果</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221145847118.png" alt="image-20201221145847118"></p><h1 id="解析表单POST请求"><a href="#解析表单POST请求" class="headerlink" title="解析表单POST请求"></a>解析表单POST请求</h1><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201221172122145.png" alt="image-20201221172122145"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function doPost(req, res)&#123;</span><br><span class="line">     var formDate&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">     req.on(&#39;data&#39;, function(data)&#123;</span><br><span class="line">         console.log(data)</span><br><span class="line">         formDate+&#x3D;data</span><br><span class="line">     &#125;)</span><br><span class="line">    </span><br><span class="line">     req.on(&#39;end&#39;, function()&#123;</span><br><span class="line">         var obj &#x3D; querystring.parse(formDate);</span><br><span class="line">         console.log(obj)</span><br><span class="line">         res.end()</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于post请求发送的数据可能很大，所以接收过程分为两步，第一个req.on用于接收数据，第二个req.on用于判断post请求结束并做出相应处理，比如用res.end()结束请求链接。</p><h1 id="分文件"><a href="#分文件" class="headerlink" title="分文件"></a>分文件</h1><p>在需要被引用的文件中写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.doPost&#x3D;doPost;</span><br></pre></td></tr></table></figure><p>在引用文件中写</p><p>var post=require(‘./doPost’)</p><h1 id="socket链接"><a href="#socket链接" class="headerlink" title="socket链接"></a>socket链接</h1><p>socket客户端</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201222175203966.png" alt="image-20201222175203966"></p><p>socket服务端</p><p><img src="nodejs%E5%AE%9E%E7%8E%B0http%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20201222173625397.png" alt="image-20201222173625397"></p><h1 id="实时通讯-多人聊天室"><a href="#实时通讯-多人聊天室" class="headerlink" title="实时通讯(多人聊天室)"></a>实时通讯(多人聊天室)</h1><p>服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var net &#x3D; require(&#39;net&#39;);</span><br><span class="line">var clientList &#x3D; []</span><br><span class="line">net.createServer(function (socket)&#123;</span><br><span class="line">    clientList.push(socket)</span><br><span class="line">    socket.write(&#39;hello&#39;)</span><br><span class="line">    socket.on(&#39;data&#39;, function(data)&#123;</span><br><span class="line">        console.log(data.toString())</span><br><span class="line">        &#x2F;&#x2F; socket.write(data)</span><br><span class="line">        broadcast(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.on(&#39;end&#39;, function()&#123;</span><br><span class="line">        socket.write(&quot;bye&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).listen(8000, &#39;127.0.0.1&#39;)</span><br><span class="line"></span><br><span class="line">function broadcast(data)&#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; clientList.length; i++)&#123;</span><br><span class="line">        clientList[i].write(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var net &#x3D; require(&#39;net&#39;)</span><br><span class="line">var hostname &#x3D; process.argv[2]</span><br><span class="line">var port &#x3D; process.argv[3]</span><br><span class="line"></span><br><span class="line">var client &#x3D; net.connect(&#123;host: hostname, port: port&#125;,</span><br><span class="line">    function() &#123;</span><br><span class="line">        console.log(&#39;connect server success&#39;)</span><br><span class="line"></span><br><span class="line">        process.stdin.setEncoding(&#39;utf-8&#39;)</span><br><span class="line">        process.stdin.resume()</span><br><span class="line">        process.stdin.on(&#39;data&#39;, function(data) &#123;</span><br><span class="line">            if (data !&#x3D; null) &#123;</span><br><span class="line">                client.write(&#39;data:&#39; + data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">client.on(&#39;data&#39;, function(data)&#123;</span><br><span class="line">    console.log(data.toString())</span><br><span class="line">    &#x2F;&#x2F; client.end()</span><br><span class="line">&#125;)</span><br><span class="line">client.on(&#39;end&#39;, function()&#123;</span><br><span class="line">    console.log(&#39;disconnect from server&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="静态服务器"><a href="#静态服务器" class="headerlink" title="静态服务器"></a>静态服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;)</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;)</span><br><span class="line">var path &#x3D; require(&#39;path&#39;)</span><br><span class="line">var mime &#x3D; require(&#39;mime&#39;)</span><br><span class="line">const &#123; type &#125; &#x3D; require(&#39;os&#39;)</span><br><span class="line">var cache &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">function send404(response) &#123;</span><br><span class="line">    response.writeHead(404, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;plain&#39;&#125;)</span><br><span class="line">    response.write(&#39;Error 404: resource not found&#39;)</span><br><span class="line">    response.end()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sendFile(response, filePath, fileContents) &#123;</span><br><span class="line">    var ss &#x3D; mime.getType(path.basename(filePath)) + &#39;;&#39; + &#39;charset&#x3D;utf-8&#39;</span><br><span class="line">    console.log(ss)</span><br><span class="line">    response.writeHead(</span><br><span class="line">        200,</span><br><span class="line">        &#123;&#39;Content-Type&#39;: ss&#125;</span><br><span class="line">    );</span><br><span class="line">    response.end(fileContents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function serverStatic(response, cache, absPath) &#123;</span><br><span class="line">    if(cache[absPath]) &#123;</span><br><span class="line">        sendFile(response, absPath, cache[absPath])</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        fs.exists(absPath, function(exists) &#123;</span><br><span class="line">            if (exists) &#123;</span><br><span class="line">                fs.readFile(absPath, function(err, data) &#123;</span><br><span class="line">                    if(err)&#123;</span><br><span class="line">                        send404(response)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        cache[absPath] &#x3D; data</span><br><span class="line">                        sendFile(response, absPath, data)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                send404(response)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var server &#x3D; http.createServer(function(req, res) &#123;</span><br><span class="line">    var filePath &#x3D; false;</span><br><span class="line"></span><br><span class="line">    if(req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">        filePath &#x3D; &#39;public&#x2F;index.html&#39;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        filePath &#x3D; &#39;public&#39; + req.url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var absPath &#x3D; &#39;.&#x2F;&#39; + filePath</span><br><span class="line"></span><br><span class="line">    serverStatic(res, cache, absPath)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8000, &#39;127.0.0.1&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;http服务器基础代码&quot;&gt;&lt;a href=&quot;#http服务器基础代码&quot; class=&quot;headerlink&quot; title=&quot;http服务器基础代码&quot;&gt;&lt;/a&gt;http服务器基础代码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习</title>
    <link href="http://example.com/2020/12/19/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/19/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-19T10:44:06.000Z</published>
    <updated>2020-12-21T01:54:09.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deepin安装Go开发环境"><a href="#Deepin安装Go开发环境" class="headerlink" title="Deepin安装Go开发环境"></a>Deepin安装Go开发环境</h1><h2 id="1-Go安装包下载"><a href="#1-Go安装包下载" class="headerlink" title="1.Go安装包下载"></a>1.Go安装包下载</h2><p>到<a href="https://studygolang.com/dl">Go语言中文网</a>下载Go安装包 go1.15.6.linux-amd64.tar.gz</p><p><img src="/2020/12/19/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/image-20201219202143224.png" alt="image-20201219202143224"></p><h2 id="2-解压安装Go"><a href="#2-解压安装Go" class="headerlink" title="2.解压安装Go"></a>2.解压安装Go</h2><p>解压Go安装包 go1.11.5.linux-amd64.tar.gz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf go1.15.6.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>tips:</p><p>我这里将安装包直接解压到了自定义目录中，linux系统一般还有如下的目录可以用于存放自己安装的软件的文件夹，放在如下目录中时后续命令需要对应改变。</p><p>/usr : 系统软件安装目录</p><p>/usr/local : 用户软件安装目录</p><p>/opt : 大型软件安装目录</p></blockquote><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc 或者 vim ~&#x2F;profile</span><br></pre></td></tr></table></figure><p>(bashrc对系统所有用户有效，profile对当前用户有效）</p><p>这里我用的profile</p><p><img src="/2020/12/19/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/image-20201219204649605.png" alt="image-20201219204649605"></p><blockquote><p>三个变量GOPATH、PATH、GOROOT：·GOROOT就是go的安装路径；·GOPATH就是go的工作目录；·PATH是go安装路径下的bin目录。</p></blockquote><p>让更改的环境变量进行生效，在终端中输入以下命令内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc 或者 source ~&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="4-查看安装结果"><a href="#4-查看安装结果" class="headerlink" title="4.查看安装结果"></a>4.查看安装结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p><img src="/2020/12/19/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/image-20201219204934424.png" alt="image-20201219204934424"></p><h1 id="Go程序语言结构"><a href="#Go程序语言结构" class="headerlink" title="Go程序语言结构"></a>Go程序语言结构</h1><p>Go 语言的基础组成有以下几个部分：</p><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><p>例如：</p><blockquote><p>go程序中的**{** 不能单独放在一行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  &#x2F;* 这是我的第一个简单的程序 *&#x2F;</span><br><span class="line">  fmt.Println(&quot;Hello, World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>第一行代码 <em>package main</em> 定义了包名。必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。</li><li> <em>import “fmt”</em> ，fmt 包实现了格式化 IO（输入/输出）的函数。</li><li> *func main()*， 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</li><li>/<em>…</em>/ 是注释，在程序执行时将被忽略。</li><li><em>fmt.Println(…)</em> 将字符串输出到控制台，并在最后自动增加换行字符 \n。<br>使用 fmt.Print(“hello, world\n”) 可以得到相同的结果。<br>Print 和 Println 这两个函数也支持使用变量。</li><li>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</li></ol></blockquote><h2 id="执行Go程序"><a href="#执行Go程序" class="headerlink" title="执行Go程序"></a>执行Go程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build hello.go     &#x2F;&#x2F;生成二进制文件</span><br><span class="line"></span><br><span class="line">.&#x2F;hello  &#x2F;&#x2F;执行</span><br></pre></td></tr></table></figure><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br></pre></td></tr></table></figure><p>fmt包实现了类似C语言printf和scanf的格式化I/O。格式化动作（’verb’）源自C语言但更简单。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><pre><code>fmt.Println()//输出任意类型数据，并换行fmt.Print()  //输出任意类型数据，不换行fmt.Printf()//格式化输出数据，不换行</code></pre><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><pre><code>fmt.Scan()//扫描，必须所有参数都被填充后换行才结束扫描fmt.Scanln()//扫描，但是遇到换行就结束扫描fmt.Scanf()//格式化扫描，换行就结束</code></pre><p>需要使用地址来取得扫描到的数据</p><p>如fmt.Scan(&amp;x,&amp;y)</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="行分隔符"><a href="#行分隔符" class="headerlink" title="行分隔符"></a>行分隔符</h2><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>Go 语言的字符串链接可以通过 <strong>+</strong> 实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(&quot;Hello&quot; + &quot;World&quot;)</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔型的值只可以是常量 true 或者 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var b bool &#x3D; true。</span><br></pre></td></tr></table></figure><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p><strong>1.整型 int</strong> </p><p><strong>2.浮点型</strong> float32、float64、complex64（复数）、complex128（复数）</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h2><p>包括：</p><ul><li>(a) 指针类型（Pointer）</li><li>(b) 数组类型</li><li>(c) 结构化类型(struct)</li><li>(d) Channel 类型</li><li>(e) 函数类型</li><li>(f) 切片类型</li><li>(g) 接口类型（interface）</li><li>(h) Map 类型</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p><strong>第一种，用<code>：=</code> 注意 <code>:=</code> 左侧如果没有声明新的变量，就产生编译错误，格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var intVal int </span><br><span class="line"></span><br><span class="line">intVal :&#x3D;1 &#x2F;&#x2F; 这时候会产生编译错误</span><br><span class="line"></span><br><span class="line">intVal,intVal1 :&#x3D; 1,2 &#x2F;&#x2F; 此时不会产生编译错误，因为有声明新的变量，因为 :&#x3D; 是一个声明语句</span><br></pre></td></tr></table></figure><p><strong>第二种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p><blockquote><p>var a int</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 没有初始化就为零值</span><br><span class="line">  var b int</span><br><span class="line">  fmt.Println(b)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; bool 零值为 false</span><br><span class="line">  var c bool</span><br><span class="line">  fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p><strong>第三种，根据值自行判定变量类型。</strong></p><blockquote><p>var a = “hello”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">  var a &#x3D; &quot;hello&quot;</span><br><span class="line">  fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">var x, y int</span><br><span class="line">var ( </span><br><span class="line">  a int</span><br><span class="line">  b bool</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var c, d int &#x3D; 1, 2</span><br><span class="line">var e, f &#x3D; 123, &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">  g, h :&#x3D; 123, &quot;hello&quot;&#x2F;&#x2F;这种不带声明格式的只能在函数体中出现，不能用于全局变量</span><br><span class="line">  </span><br><span class="line">  println(x, y, a, b, c, d, e, f, g, h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  const LENGTH int &#x3D; 10</span><br><span class="line">  const WIDTH int &#x3D; 5 </span><br><span class="line">  var area int</span><br><span class="line">  const a, b, c &#x3D; 1, false, &quot;str&quot; &#x2F;&#x2F;多重赋值</span><br><span class="line"></span><br><span class="line">  area &#x3D; LENGTH * WIDTH</span><br><span class="line">  fmt.Printf(&quot;面积为 : %d&quot;, area)</span><br><span class="line">  println()</span><br><span class="line">  println(a, b, c) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积为 : 50</span><br><span class="line">1 false str</span><br></pre></td></tr></table></figure><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; iota</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  const (</span><br><span class="line">      a &#x3D; iota  &#x2F;&#x2F;0</span><br><span class="line">      b      &#x2F;&#x2F;1</span><br><span class="line">      c      &#x2F;&#x2F;2</span><br><span class="line">      d &#x3D; &quot;ha&quot;  &#x2F;&#x2F;独立值，iota +&#x3D; 1</span><br><span class="line">      e      &#x2F;&#x2F;&quot;ha&quot;  iota +&#x3D; 1</span><br><span class="line">      f &#x3D; 100   &#x2F;&#x2F;iota +&#x3D;1</span><br><span class="line">      g      &#x2F;&#x2F;100  iota +&#x3D;1</span><br><span class="line">      h &#x3D; iota  &#x2F;&#x2F;7,恢复计数</span><br><span class="line">      i      &#x2F;&#x2F;8</span><br><span class="line">  )</span><br><span class="line">  fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 ha ha 100 100 7 8</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>和C++类似</p><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><table><thead><tr><th align="left">语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">if 语句</td><td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td></tr><tr><td align="left">if…else 语句</td><td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td></tr><tr><td align="left">if 嵌套语句</td><td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td align="left">switch 语句</td><td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td></tr><tr><td align="left">select 语句</td><td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td></tr></tbody></table><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>计算 1 到 10 的数字之和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    sum :&#x3D; 0</span><br><span class="line">    for i :&#x3D; 0; i &lt;&#x3D; 10; i++ &#123;</span><br><span class="line">        sum +&#x3D; i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    sum :&#x3D; 0</span><br><span class="line">    for &#123;</span><br><span class="line">      sum++ &#x2F;&#x2F; 无限循环下去</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum) &#x2F;&#x2F; 无法输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="For-each-range-循环"><a href="#For-each-range-循环" class="headerlink" title="For-each range 循环"></a>For-each range 循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    strings :&#x3D; []string&#123;&quot;google&quot;, &quot;runoob&quot;&#125;</span><br><span class="line">    for i, s :&#x3D; range strings &#123;</span><br><span class="line">        fmt.Println(i, s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    numbers :&#x3D; [6]int&#123;1, 2, 3, 5&#125;</span><br><span class="line">    for i,x:&#x3D; range numbers &#123;</span><br><span class="line">        fmt.Printf(&quot;第 %d 位 x 的值 &#x3D; %d\n&quot;, i,x)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>Go 语言函数定义格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func function_name( [parameter list] ) [return_types] &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有些功能不需要返回值，这种情况下 return_types 不是必须的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 函数返回两个数的最大值 *&#x2F;</span><br><span class="line">func max(num1, num2 int) int &#123;</span><br><span class="line">  &#x2F;* 声明局部变量 *&#x2F;</span><br><span class="line">  var result int</span><br><span class="line"></span><br><span class="line">  if (num1 &gt; num2) &#123;</span><br><span class="line">   result &#x3D; num1</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">   result &#x3D; num2</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h2><p>Go 函数可以返回多个值，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func swap(x, y string) (string, string) &#123;</span><br><span class="line">  return y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  a, b :&#x3D; swap(&quot;hello&quot;, &quot;world&quot;)</span><br><span class="line">  fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var balance [10] float32</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var variable_name [SIZE1][SIZE2]...[SIZEN] variable_type</span><br></pre></td></tr></table></figure><p>以下实例声明了三维的整型数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var threedim [5][10][4]int</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  &#x2F;* 数组 - 5 行 2 列*&#x2F;</span><br><span class="line">  var a &#x3D; 5int&#123; &#123;0,0&#125;, &#123;1,2&#125;, &#123;2,4&#125;, &#123;3,6&#125;,&#123;4,8&#125;&#125;</span><br><span class="line">  var i, j int</span><br><span class="line"></span><br><span class="line">  &#x2F;* 输出数组元素 *&#x2F;</span><br><span class="line">  for i &#x3D; 0; i &lt; 5; i++ &#123;</span><br><span class="line">   for j &#x3D; 0; j &lt; 2; j++ &#123;</span><br><span class="line">     fmt.Printf(&quot;a%d &#x3D; %d\n&quot;, i,j, ai )</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a[0][0] &#x3D; 0</span><br><span class="line">a[0][1] &#x3D; 0</span><br><span class="line">a[1][0] &#x3D; 1</span><br><span class="line">a[1][1] &#x3D; 2</span><br><span class="line">a[2][0] &#x3D; 2</span><br><span class="line">a[2][1] &#x3D; 4</span><br><span class="line">a[3][0] &#x3D; 3</span><br><span class="line">a[3][1] &#x3D; 6</span><br><span class="line">a[4][0] &#x3D; 4</span><br><span class="line">a[4][1] &#x3D; 8</span><br></pre></td></tr></table></figure><h2 id="向函数传递数组"><a href="#向函数传递数组" class="headerlink" title="向函数传递数组"></a>向函数传递数组</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>形参设定数组大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void myFunction(param [10]int)</span><br><span class="line">&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>形参未设定数组大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void myFunction(param []int)</span><br><span class="line">&#123;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>和C++类似</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type struct_variable_type struct &#123;</span><br><span class="line">   member definition</span><br><span class="line">   member definition</span><br><span class="line">   ...</span><br><span class="line">   member definition</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><p>访问结构体成员，需要使用点号 <strong>.</strong> 操作符，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体.成员名&quot;</span><br></pre></td></tr></table></figure><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>动态数组</p><h2 id="定义切片"><a href="#定义切片" class="headerlink" title="定义切片"></a>定义切片</h2><p>声明一个未指定大小的数组来定义切片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var identifier []type</span><br></pre></td></tr></table></figure><p>或使用make()函数来创建切片:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var slice1 []type &#x3D; make([]type, len)</span><br><span class="line"></span><br><span class="line">也可以简写为</span><br><span class="line"></span><br><span class="line">slice1 :&#x3D; make([]type, len)</span><br></pre></td></tr></table></figure><p>也可以指定容量，其中capacity为容量大小，即最大支持几个元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make([]T, length, capacity)</span><br></pre></td></tr></table></figure><h2 id="切片初始化"><a href="#切片初始化" class="headerlink" title="切片初始化"></a>切片初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D;[] int &#123;1,2,3 &#125; </span><br></pre></td></tr></table></figure><p>直接初始化切片，[]表示是切片类型，{1,2,3}初始化值依次是1,2,3.其cap=len=3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D; arr[:] </span><br></pre></td></tr></table></figure><p>初始化切片s,是数组arr的引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D; arr[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D; arr[startIndex:] </span><br></pre></td></tr></table></figure><p>默认 endIndex 时将表示一直到arr的最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D; arr[:endIndex] </span><br></pre></td></tr></table></figure><p>默认 startIndex 时将表示从arr的第一个元素开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 :&#x3D; s[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>通过切片s初始化切片s1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :&#x3D;make([]int,len,cap) </span><br></pre></td></tr></table></figure><p>通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片</p><h2 id="len-和-cap-函数"><a href="#len-和-cap-函数" class="headerlink" title="len() 和 cap() 函数"></a>len() 和 cap() 函数</h2><p>切片是可索引的，并且可以由 len() 方法获取长度。</p><p>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。</p><h2 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h2><p>可以通过设置下限及上限来设置截取切片 *[lower-bound:upper-bound]*，实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  &#x2F;* 创建切片 *&#x2F;</span><br><span class="line">  numbers :&#x3D; []int&#123;0,1,2,3,4,5,6,7,8&#125; </span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 打印原始切片 *&#x2F;</span><br><span class="line">  fmt.Println(&quot;numbers &#x3D;&#x3D;&quot;, numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 打印子切片从索引1(包含) 到索引4(不包含)*&#x2F;</span><br><span class="line">  fmt.Println(&quot;numbers[1:4] &#x3D;&#x3D;&quot;, numbers[1:4])</span><br><span class="line"></span><br><span class="line">  &#x2F;* 默认下限为 0*&#x2F;</span><br><span class="line">  fmt.Println(&quot;numbers[:3] &#x3D;&#x3D;&quot;, numbers[:3])</span><br><span class="line"></span><br><span class="line">  &#x2F;* 默认上限为 len(s)*&#x2F;</span><br><span class="line">  fmt.Println(&quot;numbers[4:] &#x3D;&#x3D;&quot;, numbers[4:])</span><br><span class="line"></span><br><span class="line">  numbers1 :&#x3D; make([]int,0,5)</span><br><span class="line">  printSlice(numbers1)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 打印子切片从索引  0(包含) 到索引 2(不包含) *&#x2F;</span><br><span class="line">  number2 :&#x3D; numbers[:2]</span><br><span class="line">  printSlice(number2)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 打印子切片从索引 2(包含) 到索引 5(不包含) *&#x2F;</span><br><span class="line">  number3 :&#x3D; numbers[2:5]</span><br><span class="line">  printSlice(number3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printSlice(x []int)&#123;</span><br><span class="line">  fmt.Printf(&quot;len&#x3D;%d cap&#x3D;%d slice&#x3D;%v\n&quot;,len(x),cap(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="append-和-copy-函数"><a href="#append-和-copy-函数" class="headerlink" title="append() 和 copy() 函数"></a>append() 和 copy() 函数</h2><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  var numbers []int</span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 允许追加空切片 *&#x2F;</span><br><span class="line">  numbers &#x3D; append(numbers, 0)</span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 向切片添加一个元素 *&#x2F;</span><br><span class="line">  numbers &#x3D; append(numbers, 1)</span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 同时添加多个元素 *&#x2F;</span><br><span class="line">  numbers &#x3D; append(numbers, 2,3,4)</span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 创建切片 numbers1 是之前切片的两倍容量*&#x2F;</span><br><span class="line">  numbers1 :&#x3D; make([]int, len(numbers), (cap(numbers))*2)</span><br><span class="line"></span><br><span class="line">  &#x2F;* 拷贝 numbers 的内容到 numbers1 *&#x2F;</span><br><span class="line">  copy(numbers1,numbers)</span><br><span class="line">  printSlice(numbers1) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printSlice(x []int)&#123;</span><br><span class="line">  fmt.Printf(&quot;len&#x3D;%d cap&#x3D;%d slice&#x3D;%v\n&quot;,len(x),cap(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="定义-Map"><a href="#定义-Map" class="headerlink" title="定义 Map"></a>定义 Map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 声明变量，默认 map 是 nil *&#x2F;</span><br><span class="line">var map_variable map[key_data_type]value_data_type</span><br><span class="line"></span><br><span class="line">&#x2F;* 使用 make 函数 *&#x2F;</span><br><span class="line">map_variable :&#x3D; make(map[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure><blockquote><p>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  var countryCapitalMap map[string]string &#x2F;*创建集合 *&#x2F;</span><br><span class="line">  countryCapitalMap &#x3D; make(map[string]string)</span><br><span class="line"></span><br><span class="line">  &#x2F;* map插入key - value对,各个国家对应的首都 *&#x2F;</span><br><span class="line">  countryCapitalMap [ &quot;France&quot; ] &#x3D; &quot;巴黎&quot;</span><br><span class="line">  countryCapitalMap [ &quot;Italy&quot; ] &#x3D; &quot;罗马&quot;</span><br><span class="line">  countryCapitalMap [ &quot;Japan&quot; ] &#x3D; &quot;东京&quot;</span><br><span class="line">  countryCapitalMap [ &quot;India &quot; ] &#x3D; &quot;新德里&quot;</span><br><span class="line"></span><br><span class="line">  &#x2F;*使用键输出地图值 *&#x2F;</span><br><span class="line">  for country :&#x3D; range countryCapitalMap &#123;</span><br><span class="line">    fmt.Println(country, &quot;首都是&quot;, countryCapitalMap [country])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;*查看元素在集合中是否存在 *&#x2F;</span><br><span class="line">  capital, ok :&#x3D; countryCapitalMap [ &quot;American&quot; ] &#x2F;*如果确定是真实的,则存在,否则不存在 *&#x2F;</span><br><span class="line">  &#x2F;*fmt.Println(capital) *&#x2F;</span><br><span class="line">  &#x2F;*fmt.Println(ok) *&#x2F;</span><br><span class="line">  if (ok) &#123;</span><br><span class="line">    fmt.Println(&quot;American 的首都是&quot;, capital)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fmt.Println(&quot;American 的首都不存在&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="delete-函数"><a href="#delete-函数" class="headerlink" title="delete() 函数"></a>delete() 函数</h2><p>delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;* 创建map *&#x2F;</span><br><span class="line">    countryCapitalMap :&#x3D; map[string]string&#123;&quot;France&quot;: &quot;Paris&quot;, &quot;Italy&quot;: &quot;Rome&quot;, &quot;Japan&quot;: &quot;Tokyo&quot;, &quot;India&quot;: &quot;New delhi&quot;&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(&quot;原始地图&quot;)</span><br><span class="line"></span><br><span class="line">    &#x2F;* 打印地图 *&#x2F;</span><br><span class="line">    for country :&#x3D; range countryCapitalMap &#123;</span><br><span class="line">        fmt.Println(country, &quot;首都是&quot;, countryCapitalMap [ country ])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*删除元素*&#x2F; delete(countryCapitalMap, &quot;France&quot;)</span><br><span class="line">    fmt.Println(&quot;法国条目被删除&quot;)</span><br><span class="line"></span><br><span class="line">    fmt.Println(&quot;删除元素后地图&quot;)</span><br><span class="line"></span><br><span class="line">    &#x2F;*打印地图*&#x2F;</span><br><span class="line">    for country :&#x3D; range countryCapitalMap &#123;</span><br><span class="line">        fmt.Println(country, &quot;首都是&quot;, countryCapitalMap [ country ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Deepin安装Go开发环境&quot;&gt;&lt;a href=&quot;#Deepin安装Go开发环境&quot; class=&quot;headerlink&quot; title=&quot;Deepin安装Go开发环境&quot;&gt;&lt;/a&gt;Deepin安装Go开发环境&lt;/h1&gt;&lt;h2 id=&quot;1-Go安装包下载&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>python实现团队游戏小程序</title>
    <link href="http://example.com/2020/12/17/python%E5%AE%9E%E7%8E%B0%E5%9B%A2%E9%98%9F%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2020/12/17/python%E5%AE%9E%E7%8E%B0%E5%9B%A2%E9%98%9F%E6%B8%B8%E6%88%8F%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-12-17T10:00:11.000Z</published>
    <updated>2020-12-17T10:10:38.714Z</updated>
    
    <content type="html"><![CDATA[<p>大学经常组织你画我猜游戏，这次学习python正好写了一个游戏自动发题和记分，只需要维护题库就行。直接上源码<code>tinyGame.py</code>。</p><p>运行时用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -u tinyGame.py</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def changePoint(playerPoints: dict):</span><br><span class="line"></span><br><span class="line">​    str &#x3D; input(&#39;输入参与者得分情况（add(sub) name point）&#39;)</span><br><span class="line"></span><br><span class="line">​    cmd &#x3D; str.split()</span><br><span class="line"></span><br><span class="line">​    if(cmd[1] in playerPoints):</span><br><span class="line"></span><br><span class="line">​        if(cmd[0] &#x3D;&#x3D; &#39;add&#39;):</span><br><span class="line"></span><br><span class="line">​            playerPoints[cmd[1]] +&#x3D; int(cmd[2])</span><br><span class="line"></span><br><span class="line">​            print(cmd[1], &#39;增加&#39;, cmd[2], &#39;分\n&#39;)</span><br><span class="line"></span><br><span class="line">​        elif(cmd[0] &#x3D;&#x3D; &#39;sub&#39;):</span><br><span class="line"></span><br><span class="line">​            playerPoints[cmd[1]] -&#x3D; int(cmd[2])</span><br><span class="line"></span><br><span class="line">​            print(cmd[1], &#39;减少&#39;, cmd[2], &#39;分\n&#39;)</span><br><span class="line"></span><br><span class="line">​    else:</span><br><span class="line"></span><br><span class="line">​        print(&#39;参与者姓名不存在！请重新输入\n&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def showPlayerPoints(playerPoints: dict):</span><br><span class="line"></span><br><span class="line">​    print(&#39;姓名\t得分&#39;)</span><br><span class="line"></span><br><span class="line">​    for p in playerPoints:</span><br><span class="line"></span><br><span class="line">​        print(p, &#39;\t&#39;, playerPoints[p])</span><br><span class="line"></span><br><span class="line">​    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def paintAndGuess(playerPoints: dict, orinArr: list):</span><br><span class="line"></span><br><span class="line">​    print(&#39;************欢迎来到你画我猜游戏************&#39;)</span><br><span class="line"></span><br><span class="line">​    probNum &#x3D; int(input(&#39;现在请输入每组的题量&#39;))</span><br><span class="line"></span><br><span class="line">​    probNum &#x3D; probNum * len(playerPoints)</span><br><span class="line"></span><br><span class="line">​    if(probNum &gt; len(orinArr)):</span><br><span class="line"></span><br><span class="line">​        print(&#39;题库题量不足！当前仅剩&#39;, len(orinArr), &#39;题&#39;)</span><br><span class="line"></span><br><span class="line">​    else:</span><br><span class="line"></span><br><span class="line">​        arr &#x3D; random.sample(orinArr, probNum)</span><br><span class="line"></span><br><span class="line">​        for a in arr:</span><br><span class="line"></span><br><span class="line">​            orinArr.remove(a)</span><br><span class="line"></span><br><span class="line">​        </span><br><span class="line"></span><br><span class="line">​        while True:</span><br><span class="line"></span><br><span class="line">​            print(&#39;输入start开始&#39;)</span><br><span class="line"></span><br><span class="line">​            if(input() &#x3D;&#x3D; &#39;start&#39;):</span><br><span class="line"></span><br><span class="line">​                break</span><br><span class="line"></span><br><span class="line">​        for a in arr:</span><br><span class="line"></span><br><span class="line">​            \# print(a)</span><br><span class="line"></span><br><span class="line">​            for i in range(len(a)):</span><br><span class="line"></span><br><span class="line">​                print(a[i], end&#x3D;&#39; &#39;)</span><br><span class="line"></span><br><span class="line">​                time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">​            print()</span><br><span class="line"></span><br><span class="line">​            while True:</span><br><span class="line"></span><br><span class="line">​                print(&#39;输入回车显示下一题&#39;)</span><br><span class="line"></span><br><span class="line">​                if(input() &#x3D;&#x3D; &#39;&#39;):</span><br><span class="line"></span><br><span class="line">​                    break</span><br><span class="line"></span><br><span class="line">​    return orinArr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printCmds():</span><br><span class="line"></span><br><span class="line">​    print(&#39;命令\t\t作用&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;show\t\t查看积分列表&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;modPoint\t增加或减少积分&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;pag\t\t你画我猜游戏&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;help\t\t查看所有命令和用法&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;endGame\t\t退出程序&#39;)</span><br><span class="line"></span><br><span class="line">​    print(&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">playerNum &#x3D; int(input(&#39;please input the num of players\n&#39;))</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">players &#x3D; [n for n in range(playerNum)]</span><br><span class="line"></span><br><span class="line">playerPoints &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(playerNum):</span><br><span class="line"></span><br><span class="line">​    print(i+1, &#39;player name&#39;)</span><br><span class="line"></span><br><span class="line">​    players[i] &#x3D; input()</span><br><span class="line"></span><br><span class="line">​    playerPoints[players[i]] &#x3D; 0</span><br><span class="line"></span><br><span class="line">print(&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file1 &#x3D; open(&#39;.&#x2F;paintAndGuess.txt&#39;)</span><br><span class="line"></span><br><span class="line">orinArr &#x3D; file1.read().split(&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line">orinArr.remove(&#39;&#39;)</span><br><span class="line"></span><br><span class="line">file1.close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line"></span><br><span class="line">​    print(&#39;请输入要做的事，不知道要做什么请输入help&#39;)</span><br><span class="line"></span><br><span class="line">​    cmd &#x3D; input()</span><br><span class="line"></span><br><span class="line">​    if(cmd &#x3D;&#x3D; &#39;endGame&#39;):</span><br><span class="line"></span><br><span class="line">​        break</span><br><span class="line"></span><br><span class="line">​    elif(cmd &#x3D;&#x3D; &#39;modPoint&#39;):</span><br><span class="line"></span><br><span class="line">​        changePoint(playerPoints)</span><br><span class="line"></span><br><span class="line">​    elif(cmd &#x3D;&#x3D; &#39;help&#39;):</span><br><span class="line"></span><br><span class="line">​        printCmds()</span><br><span class="line"></span><br><span class="line">​    elif(cmd &#x3D;&#x3D; &#39;pag&#39;):</span><br><span class="line"></span><br><span class="line">​        orinArr &#x3D; paintAndGuess(playerPoints, orinArr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    elif(cmd &#x3D;&#x3D; &#39;show&#39;):</span><br><span class="line"></span><br><span class="line">​        showPlayerPoints(playerPoints)</span><br><span class="line"></span><br><span class="line">​    else:</span><br><span class="line"></span><br><span class="line">​        print(&#39;命令不存在！您可以用以下合法命令&#39;)</span><br><span class="line"></span><br><span class="line">​        printCmds()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&#39;感谢您使用本程序&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;请多多支持我的个人博客:https:&#x2F;&#x2F;zhm-super.github.io&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;也请多多支持我的CSDN博客:https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_43916065?spm&#x3D;1010.2135.3001.5113&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;输入回车退出............&#39;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line"></span><br><span class="line">​    if(input() &#x3D;&#x3D; &#39;&#39;):</span><br><span class="line"></span><br><span class="line">​        break</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大学经常组织你画我猜游戏，这次学习python正好写了一个游戏自动发题和记分，只需要维护题库就行。直接上源码&lt;code&gt;tinyGame.py&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;运行时用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 学习--基础学习</title>
    <link href="http://example.com/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-15T03:29:37.000Z</published>
    <updated>2020-12-17T09:49:49.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="来历"><a href="#来历" class="headerlink" title="来历"></a>来历</h2><p>Python的创始人为荷兰人吉多·范罗苏姆 （Guido van Rossum）。1989年圣诞节期间，在阿姆斯特丹，Guido为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，作为ABC（为非程序员设计的语言，非开放）语言的一种继承。之所以选中Python（大蟒蛇的意思）作为该编程语言的名字，是取自英国20世纪70年代首播的电视喜剧《蒙提·派森的飞行马戏团》（Monty Python’s Flying Circus）。</p><p>自从2004年以后，python的使用率呈线性增长。Python 2于2000年10月16日发布，稳定版本是Python 2.7。Python 3于2008年12月3日发布，不完全兼容Python 2。</p><p>2018年3月，该语言作者在邮件列表上宣布Python 2.7将于2020年1月1日终止支持。用户如果想要在这个日期之后继续得到与Python 2.7有关的支持，则需要付费给商业供应商。</p><h2 id="语言风格"><a href="#语言风格" class="headerlink" title="语言风格"></a>语言风格</h2><p>Python在设计上坚持了清晰划一的风格，这使得Python成为一门易读、易维护，并且被大量用户所欢迎的、用途广泛的语言。</p><p>Python的作者有意的设计限制性很强的语法，使得不好的编程习惯（例如if语句的下一行不向右缩进）都不能通过编译。其中很重要的一项就是Python的缩进规则。</p><p>一个和其他大多数语言（如C）的区别就是，一个模块的界限，完全是由每行的首字符在这一行的位置来决定的（而C语言是用一对花括号{}来明确的定出模块的边界的，与字符的位置毫无关系）。这一点曾经引起过争议。因为自从C这类的语言诞生后，语言的语法含义与字符的排列方式分离开来，曾经被认为是一种程序语言的进步。不过不可否认的是，通过强制程序员们缩进（包括if，for和函数定义等所有需要使用模块的地方），Python确实使得程序更加清晰和美观。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Python语言及其众多的扩展库所构成的开发环境十分适合工程技术、科研人员处理实验数据、制作图表，甚至开发科学计算应用程序。许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。众多开源的科学计算软件包都提供了Python的调用接口，例如著名的计算机视觉库OpenCV、三维可视化库VTK、医学图像处理库ITK。</p><h2 id="适用方面"><a href="#适用方面" class="headerlink" title="适用方面"></a>适用方面</h2><ul><li>首选是网络应用，包括网站、后台服务等等；</li><li>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</li><li>另外就是把其他语言开发的程序再包装起来，方便使用。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。（但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，py需要0.1秒）</li><li>第二个缺点就是代码不能加密。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。</li></ol><h1 id="linux安装python"><a href="#linux安装python" class="headerlink" title="linux安装python"></a>linux安装python</h1><p>下载官网，可以看到各个版本的发布时间，最后支持时间</p><p><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215141014778.png" alt="image-20201215141014778"></p><p>1.选择一个合适的版本下载，这里选择3.9.1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.9.1&#x2F;Python-3.9.1.tgz</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215141615480.png" alt="image-20201215141615480"></p><p>2.解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.9.1.tgz</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215141917396.png" alt="image-20201215141917396"></p><p>3.编译安装</p><p>创建安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215143206557.png" alt="image-20201215143206557"></p><blockquote><p>源码的安装一般由3个步骤组成：配置（configure）、编译（make）、安装（make install）</p><p>Configure是一个可执行脚本，它有很多选项，使用命令./configure –help输出详细的选项列表。一般用configure –prefix= 来制定安装目录，便于后期管理。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215143525653.png" alt="image-20201215143525653"></p><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215145333244.png" alt="image-20201215145333244"></p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>建立软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3</span><br></pre></td></tr></table></figure><p>建立pip3（python包管理工具）的软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215150717817.png" alt="image-20201215150717817"></p><p>将/usr/local/python3/bin 加入环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215150010869.png" alt="image-20201215150010869"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215150704069.png" alt="image-20201215150704069"></p><h1 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>python是大小写敏感的语言，写错大小写会报错。</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;100 + 200 &#x3D;&#39;, 100 + 200)  &#x2F;&#x2F;py把print中的逗号翻译为空格</span><br><span class="line">print( x, end&#x3D;&quot; &quot; )  &#x2F;&#x2F;输出默认换行，不换行需要加上end&#x3D;&quot;&quot;</span><br><span class="line">print( x, end&#x3D;&quot;,&quot; )  &#x2F;&#x2F;或者用end在输出的末尾添加不同的字符</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; input()  &#x2F;&#x2F;输入变量</span><br><span class="line">name &#x3D; input(&#39;please enter your name: &#39;)  &#x2F;&#x2F;带提示的输入</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释 #</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 注释xxxxxx</span><br></pre></td></tr></table></figure><p>多行注释用’’’或”””</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">注释1</span><br><span class="line"></span><br><span class="line">注释2</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>python中不规定缩进的空格数，但是同一个代码块必须包含相同的缩进空格数。否则将会报错</p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>python中如果语句过长需要换行需要用反斜杠将换行符注释掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum &#x3D; num1 + \</span><br><span class="line"></span><br><span class="line">  num2 + \</span><br><span class="line"></span><br><span class="line">  num3</span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>python中变量不需要声明，每个变量使用前必须赋值。</p><blockquote><p>多个变量赋值可以连等，也可以用逗号为多个对象指定不同变量，如：</p><p>a, b, c = 1, 2, “hello”</p></blockquote><p>python3有如下六种标准数据类型：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>查看变量类型方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type(a)</span><br><span class="line"></span><br><span class="line">isinstance(a, int)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215161510545.png" alt="image-20201215161510545"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215161532281.png" alt="image-20201215161532281"></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>有四种数字类型：int、 float、 bool、complex（复数）</p><h4 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h4><table><thead><tr><th align="center">+</th><th align="center">加</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">/</td><td align="center">除法，得到浮点数</td></tr><tr><td align="center">//</td><td align="center">除法，得到整数</td></tr><tr><td align="center">%</td><td align="center">取余</td></tr><tr><td align="center">**</td><td align="center">乘方</td></tr></tbody></table><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left">ceil(x)</td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 Python 3 已废弃，使用 (x&gt;y)-(x。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td><td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td><td align="left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td><td align="left">返回数字x的平方根。</td></tr></tbody></table><h4 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串截取方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[a:b]</span><br></pre></td></tr></table></figure><p>字符串链接用<code>+</code></p><p>字符串的复制用<code>*</code></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215162831539.png" alt="image-20201215162831539"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215162842085.png" alt="image-20201215162842085"></p><p>字符串索引方式：</p><p><img src="https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg" alt="img"></p><blockquote><p>python字符串不能被改变，如a[0] = ‘x’会报错。</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表可以改变，也可以和字符串一样截取。</p><p>初始化定长数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b &#x3D;[0 for n in range(10)] #也可以b &#x3D; [0]*10 </span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/list_slicing1_new1.png" alt="img"></p><p><code>+</code>表示列表链接，<code>*</code>表示列表重复操作，和字符串类似。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215171211961.png" alt="image-20201215171211961"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215171222202.png" alt="image-20201215171222202"></p><p>删除列表元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del list[1]</span><br></pre></td></tr></table></figure><h4 id="相关函数和方法"><a href="#相关函数和方法" class="headerlink" title="相关函数和方法"></a>相关函数和方法</h4><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">len(list)</td><td align="center">列表元素个数</td></tr><tr><td align="center">max(list)</td><td align="center">返回列表元素最大值</td></tr><tr><td align="center">min(list)</td><td align="center">返回列表元素最小值</td></tr><tr><td align="center">list(seq)</td><td align="center">将元组转换为列表</td></tr></tbody></table><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td align="center">list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td align="center">list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="center">list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="center">list.insert(index,obj)</td><td align="center">将对象插入列表</td></tr><tr><td align="center">list.pop([index = -1])</td><td align="center">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="center">list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td align="center">list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td align="center">list.sort(key = None, reverse = False)</td><td align="center">对原列表进行排序</td></tr><tr><td align="center">list.clear()</td><td align="center">清空列表</td></tr><tr><td align="center">list.copy()</td><td align="center">复制列表</td></tr></tbody></table><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组与列表类似，但是元组元素不能修改。元组用<code>()</code>声明。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>集合声明</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215175508478.png" alt="image-20201215175508478"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215175532649.png" alt="image-20201215175532649"></p><p>可以看到，集合会自动将重复元素删除，只留下互补相同的元素，和中学数学中学到的集合概念一样。</p><p>集合的差、交、并运算。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216092226486.png" alt="image-20201216092226486"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216092247025.png" alt="image-20201216092247025"></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>在同一个字典中，键(key)必须是唯一的。</p><p>元素是通过键来存取的，而不是通过偏移存取。</p><p>字典赋值时，也必须先声明，否则会报错。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093121003.png" alt="image-20201216093121003"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093132877.png" alt="image-20201216093132877"></p><p>（未声明dict）</p><p>定义dict后，程序正确执行。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093209927.png" alt="image-20201216093209927"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093221614.png" alt="image-20201216093221614"></p><p>其他操作</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093538056.png" alt="image-20201216093538056"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216093648125.png" alt="image-20201216093648125"></p><p>用dict构造函数定义字典。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216094212726.png" alt="image-20201216094212726"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216094225663.png" alt="image-20201216094225663"></p><h2 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h2><p>1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块;</p><p>2、Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>;</p><p>3、可以if语句嵌套。</p><h1 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h1><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br></pre></td></tr></table></figure><h3 id="1-从一个list中随机选取一个元素"><a href="#1-从一个list中随机选取一个元素" class="headerlink" title="1. 从一个list中随机选取一个元素"></a>1. 从一个list中随机选取一个元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">data &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</span><br><span class="line">random.choice(data) # 随机选取一个元素</span><br></pre></td></tr></table></figure><h3 id="2-从一个list中随机选取多个元素"><a href="#2-从一个list中随机选取多个元素" class="headerlink" title="2. 从一个list中随机选取多个元素"></a>2. 从一个list中随机选取多个元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">data &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</span><br><span class="line">sample_num &#x3D; 5</span><br><span class="line">random.sample(data, sample_num) # 结果[&#39;a&#39;, &#39;d&#39;, &#39;b&#39;, &#39;f&#39;, &#39;c&#39;]，每次运行结果不同。</span><br></pre></td></tr></table></figure><h3 id="3-从data和label中随机选取多个元素"><a href="#3-从data和label中随机选取多个元素" class="headerlink" title="3. 从data和label中随机选取多个元素"></a>3. 从data和label中随机选取多个元素</h3><p>在制作数据集时，可能会有只用50%的数据的要求，所以，我们从原数据集中随机抽取30%的数据，这还要求了，<code>data</code>和<code>label</code>是对应的。接下来，讲讲我的做法。创建一个索引list，在索引list中选取N个索引，根据这些索引将data和label的数据提取出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">data &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</span><br><span class="line">label &#x3D; [0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">sample_num &#x3D; int(0.5 * len(data)) # 假设取50%的数据</span><br><span class="line"></span><br><span class="line">sample_list &#x3D; [i for i in range(len(data))] # [0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="line"></span><br><span class="line">sample_list &#x3D; random.sample(sample_list, sample_num) #随机选取出了 [3, 4, 2, 0]</span><br><span class="line"></span><br><span class="line">sample_data &#x3D; [data[i] for i in sample_list] # [&#39;d&#39;, &#39;e&#39;, &#39;c&#39;, &#39;a&#39;]</span><br><span class="line"></span><br><span class="line">sample_label &#x3D; [label[i] for i in label] # [3, 4, 2, 0]</span><br></pre></td></tr></table></figure><h1 id="linux脚本式编程"><a href="#linux脚本式编程" class="headerlink" title="linux脚本式编程"></a>linux脚本式编程</h1><p>方法一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216094953594.png" alt="image-20201216094953594"></p><p>方法二:</p><p>先用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which python3</span><br></pre></td></tr></table></figure><p>查看python3路径</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216100316992.png" alt="image-20201216100316992"></p><p>然后在脚本顶部（第一行）添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;python3</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216100450600.png" alt="image-20201216100450600"></p><p>然后修改脚本权限，使其有执行权限，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.py</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216095227092.png" alt="image-20201216095227092"></p><p>执行</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216100518745.png" alt="image-20201216100518745"></p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h4 id="1-输出中文报错。"><a href="#1-输出中文报错。" class="headerlink" title="1.输出中文报错。"></a>1.输出中文报错。</h4><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215170810402.png" alt="image-20201215170810402"></p><p>原因：python默认使用ascii编码，使用中文要在文件顶部写上<code># coding=UTF-8</code></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201215170929958.png" alt="image-20201215170929958"></p><h4 id="2-vscode中英文混合输出时中文显示为ascii码。"><a href="#2-vscode中英文混合输出时中文显示为ascii码。" class="headerlink" title="2.vscode中英文混合输出时中文显示为ascii码。"></a>2.vscode中英文混合输出时中文显示为ascii码。</h4><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216091806856.png" alt="image-20201216091806856"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216091716442.png" alt="image-20201216091716442"></p><p>原因：python2编译运行代码会出现问题，由于系统中自带了python2,然后vscode又没有使用我安装的python3编译代码，所以需要更改一下vscode的配置。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216092015590.png" alt="image-20201216092015590"></p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216092047062.png" alt="image-20201216092047062"></p><p>更改后编译显示正常。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201216092126921.png" alt="image-20201216092126921"></p><h4 id="3-for循环直接更改list内容不成功"><a href="#3-for循环直接更改list内容不成功" class="headerlink" title="3.for循环直接更改list内容不成功"></a>3.for循环直接更改list内容不成功</h4><p>以下方法不能成功更改列表内容</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201217102735505.png" alt="image-20201217102735505"></p><p>需要用这种写法</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201217102924217.png" alt="image-20201217102924217"></p><h4 id="4-在同一行逐字打印"><a href="#4-在同一行逐字打印" class="headerlink" title="4.在同一行逐字打印"></a>4.在同一行逐字打印</h4><p>python默认打印换行，但是如果用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(i, end&#x3D;&#39; &#39;)</span><br></pre></td></tr></table></figure><p>的话在终端会过一会一起输出，这是因为终端执行默认是把一行的内容缓存到一起，然后才打印。</p><p>我们在运行代码时，加上<code>-u</code>参数，即立即打印不缓存，即可正常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -u tinyGame.py</span><br></pre></td></tr></table></figure><h4 id="5-vscode一直提示pylint安装不成功"><a href="#5-vscode一直提示pylint安装不成功" class="headerlink" title="5.vscode一直提示pylint安装不成功"></a>5.vscode一直提示pylint安装不成功</h4><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201217150308466.png" alt="image-20201217150308466"></p><p>需要换源，换成淘宝源</p><blockquote><p>1.在<code>/etc/</code>目录下边创建<code>pip.conf</code>文件</p></blockquote><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201217151439419.png" alt="image-20201217151439419"></p><blockquote><p>2.在打开的<code>pip.conf</code>文件内写入以下内容：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[global] </span><br><span class="line"></span><br><span class="line">index-url&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; </span><br><span class="line"></span><br><span class="line">[install] </span><br><span class="line"></span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>保存退出，可以看到下载速度显著提升。</p><p><img src="/2020/12/15/python-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20201217153017125.png" alt="image-20201217153017125"></p><h4 id="6-python判断用户键盘输入的是回车后执行逻辑"><a href="#6-python判断用户键盘输入的是回车后执行逻辑" class="headerlink" title="6.python判断用户键盘输入的是回车后执行逻辑"></a>6.python判断用户键盘输入的是回车后执行逻辑</h4><p>不能使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(input() &#x3D;&#x3D; &#39;\n&#39;):</span><br><span class="line">print(&#39;hello&#39;)</span><br></pre></td></tr></table></figure><p>需要使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(input() &#x3D;&#x3D; &#39;&#39;):</span><br><span class="line">print(&#39;hello&#39;)</span><br></pre></td></tr></table></figure><p>原因：<code>input()</code>函数中，默认是把回车键删除，所以最后输入的内容只剩下空的字符串。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;来历&quot;&gt;&lt;a href=&quot;#来历&quot; class=&quot;headerlink&quot; title=&quot;来历&quot;&gt;&lt;/a&gt;来历&lt;/h2&gt;&lt;p&gt;Pyt</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux 安装nodejs</title>
    <link href="http://example.com/2020/12/15/linux-%E5%AE%89%E8%A3%85nodejs/"/>
    <id>http://example.com/2020/12/15/linux-%E5%AE%89%E8%A3%85nodejs/</id>
    <published>2020-12-15T03:14:38.000Z</published>
    <updated>2020-12-15T03:19:56.191Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载解压</p><p>官网<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 下载已编译好的版本（Linux Binaries (x64)），或直接#wget <a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz">https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz</a></p><p>#tar xf <a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz">node-v12.16.1-linux-x64.tar.xz</a></p><p>#cd <a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz">node-v12.16.1-linux-x64</a></p><p>#./bin/node -v 查看node版本</p><p>2、设置软链接</p><p>此时若直接在终端输入node -v，则显示node命令不存在，这是因为/usr/local/bin文件夹中还没有node，因此需要设置软链接。</p><p>ln -s home/usrname/<a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz">node-v12.16.1-linux-x64</a>/bin/node /usr/local/bin/  （node命令）</p><p>ln -s home/usrname/<a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz">node-v12.16.1-linux-x64</a>/bin/npm /usr/local/bin/ （npm命令）</p><p>此时，node和npm安装完成！终端输入node -v或npm -v，则显示node和npm的版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、下载解压&lt;/p&gt;
&lt;p&gt;官网&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt; 下载已编译好的版本（Linux Binaries (x64)），或直接#wget &lt;a</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>bash:xxx未找到命令--建立linux软链接</title>
    <link href="http://example.com/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    <id>http://example.com/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/</id>
    <published>2020-12-15T02:39:26.000Z</published>
    <updated>2020-12-15T03:22:00.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bash-node-未找到命令"><a href="#bash-node-未找到命令" class="headerlink" title="bash: node: 未找到命令"></a>bash: node: 未找到命令</h2><p><img src="/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20201215104450.png" alt="截图录屏_选择区域_20201215104450"></p><p>安装nodejs和npm时，到官网下载完安装包解压后，直接输入<code>node -v</code>和<code>npm -v</code>会报<code>bash： node（npm）:未找到命令</code>，此时需要建立软链接，类似windows下的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 源路径 系统路径</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20201215105148.png" alt="截图录屏_选择区域_20201215105148"></p><p>此时再全局查看<code>node -v</code>和<code>npm -v</code> 就不会有问题了。</p><p><img src="/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20201215105326.png" alt="截图录屏_选择区域_20201215105326"></p><h2 id="bash-hexo-未找到命令"><a href="#bash-hexo-未找到命令" class="headerlink" title="bash: hexo: 未找到命令"></a>bash: hexo: 未找到命令</h2><p>安装完hexo后，又提示未找到命令，按照之前的方法，再次为hexo建立软链接即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;home&#x2F;zhm&#x2F;program&#x2F;node-v14.15.1-linux-x64&#x2F;bin&#x2F;hexo &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/linux%E8%BD%AF%E9%93%BE%E6%8E%A5/%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20201215105621.png" alt="截图录屏_选择区域_20201215105621"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bash-node-未找到命令&quot;&gt;&lt;a href=&quot;#bash-node-未找到命令&quot; class=&quot;headerlink&quot; title=&quot;bash: node: 未找到命令&quot;&gt;&lt;/a&gt;bash: node: 未找到命令&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/202</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/14/hello-world/"/>
    <id>http://example.com/2020/12/14/hello-world/</id>
    <published>2020-12-14T12:44:46.976Z</published>
    <updated>2020-12-15T03:09:50.427Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;学习笔记&quot;</span></span><br></pre></td></tr></table></figure><h3 id="hexo插入图片"><a href="#hexo插入图片" class="headerlink" title="hexo插入图片"></a>hexo插入图片</h3><blockquote><p>1.把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true。</p></blockquote><blockquote><p>2.在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件。</p><p>3.安装用于显示图片缩略图的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>4.接着，新建文章的时候会有个同名的文件夹，想引入图片时，先把图片复制到这个文件夹中，然后只需要在.md中引入图片。</p></blockquote><h2 id="butterfly-教程"><a href="#butterfly-教程" class="headerlink" title="butterfly 教程"></a>butterfly 教程</h2><blockquote><p>官方教程：<a href="https://butterfly.js.org/posts/ceeb73f/">https://butterfly.js.org/posts/ceeb73f/</a><br>优秀博客：<a href="https://www.antmoe.com/photo/wallpaper/%EF%BC%88%E5%A3%81%E7%BA%B8%EF%BC%89">https://www.antmoe.com/photo/wallpaper/（壁纸）</a><br>魔改博客：<a href="https://blog.csdn.net/u012208219/article/details/106883001/">https://blog.csdn.net/u012208219/article/details/106883001/</a><br>教程：<a href="https://jerryc.me/posts/21cfbf15#%E9%83%A8%E7%BD%B2%E5%88%B0%E7%B6%B2%E7%AB%99">https://jerryc.me/posts/21cfbf15#%E9%83%A8%E7%BD%B2%E5%88%B0%E7%B6%B2%E7%AB%99</a><br>        <a href="https://blog.csdn.net/cungudafa/article/details/105699384">https://blog.csdn.net/cungudafa/article/details/105699384</a></p></blockquote><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>windows笔记本下ubuntu双系统安装</title>
    <link href="http://example.com/2020/12/14/windows%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8Bubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2020/12/14/windows%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%B8%8Bubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-12-14T09:57:00.000Z</published>
    <updated>2020-12-14T09:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作ubuntu启动盘"><a href="#制作ubuntu启动盘" class="headerlink" title="制作ubuntu启动盘"></a>制作ubuntu启动盘</h2><ol><li><p>首先进入 <a href="https://www.ubuntu.com/download/desktop">Ubuntu 官网下载</a> Ubuntu20.04.1 ios 镜像包，下载的镜像包为：ubuntu-20.04.1-desktop-amd64.iso</p></li><li><p>然后通过刻录软件将镜像刻录进U盘中，所有双系统的安装都差不多是这个过程，这里就不做赘述，详细过程可见<a href="https://www.cnblogs.com/silentdoer/p/13044305.html">链接</a>。</p></li><li><p>利用制作启动盘的时间，我们顺便为ubuntu 的安装准备一个空的盘符，独立安装ubuntu系统，以免安装系统后影响到我们windows中原有的数据。具体过程为：</p><blockquote><p>右键点击我的电脑；</p><p>点击管理；</p><p>选择磁盘管理；</p><p>找到一个需要分出空间的盘符，比如F盘；</p><p>右键点击该盘符；</p><p>选择压缩卷；</p><p>输入需要压缩的大小，即为ubuntu系统准备的大小，比如128G，则需要输入131072MB(128*1024)；</p><p>点击确定，等待系统完成分盘即可。</p></blockquote></li><li><p>启动盘制作完成后，重启电脑，将U盘插到电脑上，按F12进入BIOS模式（我的电脑是DELL的，不同厂商电脑可能不同，具体可以百度搜索自己的电脑如何进入BIOS）</p></li></ol><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>1.在BIOS中选择以U盘方式启动系统后，进入系统安装界面。</p><p><img src="https://img-blog.csdnimg.cn/20201208095021417.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下面截图仅说明关键步骤，其他步骤默认即可。</p><p>2.进入系统界面首先选择语言（按个人习惯选择中文英文都可以，但是英文系统不会默认安装中文输入法，需要进入系统后自行安装），然后点击安装。</p><p>3.这里我选择了最小安装，系统只会给我安装一些必要软件和工具，其他的自己想装什么等系统安装完再装就好了，这样还节约时间。</p><p><img src="https://img-blog.csdnimg.cn/20201208095042510.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.这里注意选择其他选项，就和windows中的自定义安装一个道理，我们不会想要系统帮我们将ubuntu安装到windows系统盘C盘，也不会想要将整个电脑格式化来安装ubuntu，所以我们选择将系统自定义安装到我们事先准备好的一个空盘符中。<br><img src="https://img-blog.csdnimg.cn/20201208095107943.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>5.找到我们在windows中已经分好的盘符（看空间大小即可，但是这里会发现空间大小会比我们在windows中分的大小稍微大一点，这是没问题的）。</p><p>然后点击选中该区域，点击左下角的“+”开始对区域进行分区。参考下图，需要分出<code>swap</code>、<code>/boot</code>、<code>/</code>、<code>/home</code>这几个分区，其中swap为交换区域大小，用于内存交换，我们分配4095MB。/boot为系统启动项，至少分配200MB，也可以大一点。/为系统文件夹存放的地方，相当于windows的C盘，我这里分配了4G；最后的/home目录即为用户文件目录，后续用户操作的各个文件都存在该文件夹下。</p><p><img src="https://img-blog.csdnimg.cn/20201208095135995.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.分区完成后，我们将下面“安装启动引导的设备”由我们的U盘改成/boot目录所对应的名称，我这里是/dev/sdb6，然后点击<code>现在安装</code>，会提示我们将有几个分区所在内存被格式化，由于我们的分区都在我们实现分好的空盘符中，所以不用害怕windows有数据被删除，点击继续就好了。</p><p><img src="https://img-blog.csdnimg.cn/20201208095149470.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>7.然后我们等待系统安装，过程中需要选一下时区，北京上海都行，就是我们的东八区时间。</p><p>8.ubuntu20.04.1系统安装时默认根据电脑显卡安装了驱动，比如我的电脑是nvidia独显，则会给我安装好nvidia的驱动，其他比较老一点的版本可能还需要自己手动安装一下驱动，以便ubuntu的正常启动和显示。确认驱动安装完成后，再重启电脑。</p><p>9.重启电脑，拔出U盘，开机界面选择ubuntu进入，大功告成。</p><h2 id="系统安装后问题"><a href="#系统安装后问题" class="headerlink" title="系统安装后问题"></a>系统安装后问题</h2><p>windows电脑装完系统后可能会出现windows系统下的时间不对，一般是会比正常时间晚八个小时，这里需要修改一下windows电脑的注册表设置，具体操作可自行百度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;制作ubuntu启动盘&quot;&gt;&lt;a href=&quot;#制作ubuntu启动盘&quot; class=&quot;headerlink&quot; title=&quot;制作ubuntu启动盘&quot;&gt;&lt;/a&gt;制作ubuntu启动盘&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先进入 &lt;a href=&quot;https://www</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础知识</title>
    <link href="http://example.com/2020/12/14/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2020/12/14/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-12-14T09:55:00.000Z</published>
    <updated>2020-12-14T09:55:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux用户和权限"><a href="#linux用户和权限" class="headerlink" title="linux用户和权限"></a>linux用户和权限</h3><h4 id="使用ls命令查看文件属性"><a href="#使用ls命令查看文件属性" class="headerlink" title="使用ls命令查看文件属性"></a>使用ls命令查看文件属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l    </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls-al</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120809544664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1）第一列 drwxr-xr-x 表示的是文件的类型和权限。</p><p>2）第二列 表示的是文件的连接数。硬链接会增加这个数值，软连接不会。</p><p>3）第三列 表示的是文件的拥有者。</p><p>4）第四列 表示的是文件的用户组。</p><p>5）第五列 表示的是文件的大小，单位是Byte。</p><p>6）第六列 12月 表示的是文件最后被修改的月份。</p><p>7）第七列 表示的是文件最后被修改的日期。</p><p>8）第八列 17:30 表示的是文件最后被修改的时间。</p><p>9）第九列 . 表示的是文件的名称。如果文件名称是以“.”开头的，说明该文件是隐藏文件。</p><h4 id="新建用户test001"><a href="#新建用户test001" class="headerlink" title="新建用户test001"></a>新建用户test001</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser test001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095542546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="查看用户、用户组"><a href="#查看用户、用户组" class="headerlink" title="查看用户、用户组"></a>查看用户、用户组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groups查看当前用户所在用户组</span><br><span class="line"></span><br><span class="line">groups test001查看用户test001所在用户组</span><br><span class="line"></span><br><span class="line">whoami查看当前登录用户名</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095603469.png" alt="在这里插入图片描述"></p><h4 id="切换用户test001"><a href="#切换用户test001" class="headerlink" title="切换用户test001"></a>切换用户test001</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su test001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095620101.png" alt="在这里插入图片描述"></p><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取----数字4；写入----数字2；执行----数字1</span><br></pre></td></tr></table></figure><blockquote><p>3个数字分别表达对 用户（文件或目录的所有者），用户组（同组用户），其他用户 的权限：</p></blockquote><p>现将“模板”文件夹设置为只有当前用户有读写权限，其他用户没有读写权限：</p><p>对用户可读可写：4（读取） + 2（写入）= 6</p><p>对用户组：0</p><p>对其他用户：0</p><p>所以命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 .&#x2F;模板</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095638949.png" alt="在这里插入图片描述"></p><p>更改完成后查看文件权限</p><p><img src="https://img-blog.csdnimg.cn/202012080956533.png" alt="在这里插入图片描述"></p><p>可以看到只有当前用户有rw-权限，用户组和其他用户权限为—</p><p>然后切换到另外一个账户zhm，可以看到cd命令进入文件夹时已经提示权限不够</p><p><img src="https://img-blog.csdnimg.cn/20201208095712676.png" alt="在这里插入图片描述"></p><h4 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo addgroup test002新建用户组test002</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095727486.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupmod test002 -n test003将用户组test002改名为test003</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208095743644.png" alt="在这里插入图片描述"></p><h3 id="linux网络"><a href="#linux网络" class="headerlink" title="linux网络"></a>linux网络</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show&#x2F;&#x2F;查看当前机器ip地址信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i  wlp3s0 -nnA &#39;port 80&#39;&#x2F;&#x2F;抓取wlp3s0网关下面80端口的请求（web请求）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nt&#x2F;&#x2F;查看tcp链接</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;linux用户和权限&quot;&gt;&lt;a href=&quot;#linux用户和权限&quot; class=&quot;headerlink&quot; title=&quot;linux用户和权限&quot;&gt;&lt;/a&gt;linux用户和权限&lt;/h3&gt;&lt;h4 id=&quot;使用ls命令查看文件属性&quot;&gt;&lt;a href=&quot;#使用ls命令查看文</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础 Linux环境</title>
    <link href="http://example.com/2020/12/14/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%20Linux%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2020/12/14/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%20Linux%E7%8E%AF%E5%A2%83/</id>
    <published>2020-12-14T09:53:00.000Z</published>
    <updated>2020-12-14T09:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vim-编辑器"><a href="#vim-编辑器" class="headerlink" title="vim 编辑器"></a>vim 编辑器</h2><p>打开多个文件(在main.c下打开max.c)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:sp max.c&#x2F;&#x2F;横屏</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:vs max.c&#x2F;&#x2F;竖屏</span><br></pre></td></tr></table></figure><p>切换文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl  +  w  +  上箭头&#x2F;下箭头</span><br></pre></td></tr></table></figure><p>显示行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set nu</span><br></pre></td></tr></table></figure><h2 id="makefile编写"><a href="#makefile编写" class="headerlink" title="makefile编写"></a>makefile编写</h2><p><img src="https://img-blog.csdnimg.cn/20201208100107133.png" alt="在这里插入图片描述"></p><h2 id="main函数中的参数"><a href="#main函数中的参数" class="headerlink" title="main函数中的参数"></a>main函数中的参数</h2><p><img src="https://img-blog.csdnimg.cn/20201208100118772.png" alt="在这里插入图片描述"></p><p>其中argv表示终端命令输入时参数个数， argc[]表示参数数组。</p><h2 id="main函数返回值"><a href="#main函数返回值" class="headerlink" title="main函数返回值"></a>main函数返回值</h2><p>下面命令可以查询系统上一个执行函数返回值，为0表示返回正常(即源代码中的return 0)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $?</span><br></pre></td></tr></table></figure><p>只有在返回0时，系统命令可以继续执行，否则无法执行，&amp;&amp;符号可以将两个命令结合起来一起执行，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello.out &amp;&amp; .&#x2F;hello.out</span><br></pre></td></tr></table></figure><p>该命令表示编译hello.c文件为hello.out文件，并执行hello.out文件。</p><h2 id="标准输入输出流和错误流和重定向"><a href="#标准输入输出流和错误流和重定向" class="headerlink" title="标准输入输出流和错误流和重定向"></a>标准输入输出流和错误流和重定向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stdin</span><br><span class="line"></span><br><span class="line">stdout</span><br><span class="line"></span><br><span class="line">stderr</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208100135250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>代码中的输入输出语句和注释语句等价，第一个参数可以换成其他输出设备，std默认为显示器输出。</p><h3 id="输出流重定向"><a href="#输出流重定向" class="headerlink" title="输出流重定向"></a>输出流重定向</h3><p>将a.out执行结果输出追加到t.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out 1&gt;&gt;t.txt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208100157644.png" alt="在这里插入图片描述"></p><p>将a.out执行结果输出覆盖到t.txt(默认1&gt;t.txt的1 可不写)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out 1&gt;t.txt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120810020816.png" alt="在这里插入图片描述"></p><h3 id="输入流重定向"><a href="#输入流重定向" class="headerlink" title="输入流重定向"></a>输入流重定向</h3><p>将input.txt文件内容自动输入到a.out 程序中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out&lt;input.txt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208100217483.png" alt="在这里插入图片描述"></p><h3 id="错误流重定向"><a href="#错误流重定向" class="headerlink" title="错误流重定向"></a>错误流重定向</h3><p>将a.out执行结果错误信息输出到f.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out 2&gt;f.txt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208100228439.png" alt="在这里插入图片描述"></p><h3 id="三个流重定向一起使用"><a href="#三个流重定向一起使用" class="headerlink" title="三个流重定向一起使用"></a>三个流重定向一起使用</h3><p>用于将正确输入和错误输入分别导入到不同文件</p><p><img src="https://img-blog.csdnimg.cn/20201208100236846.png" alt="在这里插入图片描述"></p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>利用管道查询/etc文件夹下所有文件名中带有ab的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F;etc | grep ab</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120810024711.png" alt="在这里插入图片描述"></p><p>利用管道查询系统所有进程中的ssh进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e |grep ssh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208100258964.png" alt="在这里插入图片描述"></p><h3 id="利用管道实现小程序"><a href="#利用管道实现小程序" class="headerlink" title="利用管道实现小程序"></a>利用管道实现小程序</h3><p>程序1：用总和与个数求平均数</p><p><img src="https://img-blog.csdnimg.cn/20201208100309765.png" alt="在这里插入图片描述"></p><p>程序2：输入多个数求总和与个数</p><p><img src="https://img-blog.csdnimg.cn/20201208100319944.png" alt="在这里插入图片描述"></p><p>用管道将两个程序连接执行</p><p><img src="https://img-blog.csdnimg.cn/20201208100328494.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vim-编辑器&quot;&gt;&lt;a href=&quot;#vim-编辑器&quot; class=&quot;headerlink&quot; title=&quot;vim 编辑器&quot;&gt;&lt;/a&gt;vim 编辑器&lt;/h2&gt;&lt;p&gt;打开多个文件(在main.c下打开max.c)&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>gdb调试查看栈内存</title>
    <link href="http://example.com/2020/12/14/gdb%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B%E6%A0%88%E5%86%85%E5%AD%98/"/>
    <id>http://example.com/2020/12/14/gdb%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B%E6%A0%88%E5%86%85%E5%AD%98/</id>
    <published>2020-12-14T09:46:23.000Z</published>
    <updated>2020-12-14T09:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们利用一个两层函数调用的简单程序——输入两个整数求最大公约数。来学习与理解gdb调试的过程。</p><p>首先进行代码编写</p><p>main函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&quot;cal.h&quot;</span><br><span class="line">#include&quot;res.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    printf(&quot;请输入两个数字:\n&quot;);</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">    int res;</span><br><span class="line">    res &#x3D; cal(a,b);</span><br><span class="line">    printf(&quot;最大公约数是:%d\n&quot;,res);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cal()函数比较两个输入数值大小，并将大的数字放在前面，作为下一个函数的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;res.h&quot;</span><br><span class="line">int cal(int a, int b)&#123;</span><br><span class="line">    int t;</span><br><span class="line">    if(a &lt; b)&#123;</span><br><span class="line">        t &#x3D; a;</span><br><span class="line">        a &#x3D; b;</span><br><span class="line">        b &#x3D; t;</span><br><span class="line">    &#125;</span><br><span class="line">    int r &#x3D; res(a, b);</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>res()函数利用辗转相除法求最大公约数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int res(int a, int b)</span><br><span class="line">&#123; </span><br><span class="line">    int m,c;</span><br><span class="line">    m &#x3D; a * b;</span><br><span class="line">    c &#x3D; a % b;</span><br><span class="line">    while(c !&#x3D; 0)&#123;</span><br><span class="line">        a &#x3D; b;</span><br><span class="line">        b &#x3D; c;</span><br><span class="line">        c &#x3D; a % b;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有两个函数声明的头文件<code>cal.h</code>和<code>res.h</code>：</p><blockquote><p>cal.h</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int cal(int a, int b);</span><br></pre></td></tr></table></figure><blockquote><p>res.h</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int res(int a, int b);</span><br></pre></td></tr></table></figure><p>编写Makefile文件，注意需要每一条语句都加上 <code>-g</code> 属性，否则可能会出现有些地方无法调试，比如函数无法单步进入。<br><img src="https://img-blog.csdnimg.cn/20201209100602326.png" alt="在这里插入图片描述"><br>编译链接文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209100704124.png" alt="在这里插入图片描述"><br>进入main.out程序调试语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb main.out</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209100727574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开始运行函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start</span><br></pre></td></tr></table></figure><p>逐条语句执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120910080647.png" alt="在这里插入图片描述"><br>单步进入函数内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209100824209.png" alt="在这里插入图片描述"><br>查看当前函数调用栈，可以看到这里栈内有两个函数，栈顶是当前进入的cal函数，用于比较两个输入数据的大小并调整顺序。栈底是main函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209100853468.png" alt="在这里插入图片描述"><br>继续执行代码，在执行完判断并交换的逻辑之后，我们可以看到输入时a=33，b=66。现在值已经交换过来了。<code>p</code>命令用于打印某个变量的值。<br><img src="https://img-blog.csdnimg.cn/202012091009157.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209100934539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这时可以看到又到了一个函数res这一行，我们再次单步进入，并查看函数栈<br><img src="https://img-blog.csdnimg.cn/20201209101100234.png" alt="在这里插入图片描述"></p><p>可以看到栈内已经保存了三个函数了。但此时由于参数还没有传进来，所以res的两个参数还是一个系统随机的初始值，我们继续执行一条语句就可以看到参数已经传进来了。<br><img src="https://img-blog.csdnimg.cn/2020120910131045.png" alt="在这里插入图片描述"></p><p>当我们打印出变量m,c的地址时，由于整形占的是四个字节，可以看到整形变量的地址是连续分配的。<br><img src="https://img-blog.csdnimg.cn/20201209101321693.png" alt="在这里插入图片描述"></p><p>我们还可以在循环中打印c的值，实时查看辗转相除求最大公约数的过程。<br><img src="https://img-blog.csdnimg.cn/20201209101332990.png" alt="在这里插入图片描述"></p><p>明白整个过程后，q退出调试。<br><img src="https://img-blog.csdnimg.cn/20201209101347173.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天我们利用一个两层函数调用的简单程序——输入两个整数求最大公约数。来学习与理解gdb调试的过程。&lt;/p&gt;
&lt;p&gt;首先进行代码编写&lt;/p&gt;
&lt;p&gt;main函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git基础学习</title>
    <link href="http://example.com/2020/12/14/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/14/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-14T06:12:00.000Z</published>
    <updated>2020-12-14T09:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>初始化目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>把文件t1.txt添加到仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add t1.txt</span><br></pre></td></tr></table></figure><p>把文件提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;说明注释&quot;</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 可以多次add，统一commit</li><li><input checked disabled type="checkbox"> Git命令必须在Git仓库目录内执行（<code>git init</code>除外），在仓库目录外执行是没有意义的。</li><li><input checked disabled type="checkbox"> 添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</li></ul><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>查看仓库状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看文件改动内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff t1.txt</span><br></pre></td></tr></table></figure><p>查看修改日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209175051143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNjA2NQ==,size_16,color_FFFFFF,t_70"></p><p>查看简单版修改日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209175110608.png" alt="在这里插入图片描述"></p><p>前面十六进制数据表示的是commit id（版本号）</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p><code>HEAD</code>表示当前版本，上一个版本是<code>HEAD^</code>，上上版本是<code>HEAD^^</code>，或者可以写为<code>HEAD~2</code></p><p>版本回退可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>返回到最新版本可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;版本号前几位(至少四位)或者版本标签&gt;</span><br></pre></td></tr></table></figure><p>如果不记得最新的版本号，可以用下面的命令查找历史中自己输入的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><ul><li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p></li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><p>，就回到了场景1，第二步按场景1操作。</p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p></li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><pre><code>git rm t1.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. &#96;&#96;&#96;</span><br><span class="line">   git commit -m &quot;delete t1.txt&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="github配置公钥"><a href="#github配置公钥" class="headerlink" title="github配置公钥"></a>github配置公钥</h3><ol><li><p>创建SSH Key，在用户主目录下，找到.ssh目录（应该是隐藏目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>会生成<code>id_rsa</code>  <code>id_rsa.pub</code>文件。其中<code>id_rsa</code>是私钥，自己保存；<code>id_rsa.pub</code>是公钥。</p></li><li><p>登陆github，打开“Account settings”，“SSH Keys”页面：然后点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容。</p></li></ol><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>创建新仓库<br><img src="https://img-blog.csdnimg.cn/20201209175206669.png" alt="在这里插入图片描述"></p><ol><li><p>将本地仓库与远程仓库关联，远程仓库命名为<code>origin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:zhm-super&#x2F;gitlearn.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库的内容推送到远程库上，加上<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，便于后续推送简化命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>后续修改可以通过下面的命令将本地master分支的最新修改推送至github</p></li></ol><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>git clone &lt;仓库地址&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:zhm-super&#x2F;gitlearn.git</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>查看分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;name&gt;    或     git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><p>创建+切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c &lt;name&gt;    或    git checkout -b &lt;name&gt;</span><br></pre></td></tr></table></figure><p>合并某分支到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="远程推送和抓取"><a href="#远程推送和抓取" class="headerlink" title="远程推送和抓取"></a>远程推送和抓取</h3><p>查看远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>查看远程库详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>将本地master分支推送到远程地址为origin的main分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:main</span><br></pre></td></tr></table></figure><h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h4><p>将地址为origin的远程main分支拉取到本地dev分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main:dev</span><br></pre></td></tr></table></figure><blockquote><p>有冲突时，需要用fetch拉取</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin main:dev</span><br></pre></td></tr></table></figure><blockquote><p>然后再用merge合并解决冲突</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h4 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h4><p>打标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m &quot;version 1.0&quot;</span><br></pre></td></tr></table></figure><p>列出标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>对之前的提交打标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.1 9e510e(版本号前几位)</span><br></pre></td></tr></table></figure><p>查看标签的详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.2</span><br></pre></td></tr></table></figure><p>标签需要额外提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line">或一次提交多个</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git基础&quot;&gt;&lt;a href=&quot;#git基础&quot; class=&quot;headerlink&quot; title=&quot;git基础&quot;&gt;&lt;/a&gt;git基础&lt;/h1&gt;&lt;h2 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
